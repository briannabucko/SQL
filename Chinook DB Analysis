For this project, I worked with a dataset called chinook, which represents a digital media store and includes tables for artists,
albums, media tracks, invoices, and customers

SELECT * FROM chinook0.albums LIMIT 3;
SELECT * FROM chinook0.artists LIMIT 30;
SELECT * FROM chinook0.customers LIMIT 3;
SELECT * FROM chinook0.employees LIMIT 3;
SELECT * FROM chinook0.genres LIMIT 3;
SELECT * FROM chinook0.invoice_items LIMIT 3;
SELECT * FROM chinook0.invoices LIMIT 3;
SELECT * FROM chinook0.media_tyes LIMIT 3;
SELECT * FROM chinook0.playlist_track LIMIT 3;
SELECT * FROM chinook0.playlists LIMIT 3;
SELECT * FROM chinook0.tracks LIMIT 3;

--Part 1: Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").
SELECT FirstName, 
LastName,
CustomerId,
Country
FROM customers 
WHERE Country<>'USA';

--Part 2: Show only the Customers from Brazil.
SELECT FirstName,
LastName,
CustomerID
FROM customers 
WHERE Country='Brazil';

--Part 3: Find the Invoices of customers who are from Brazil.The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
SELECT customers.FirstName,
customers.LastName,
invoices.InvoiceId,
invoices.InvoiceDate,
invoices.BillingCountry
FROM customers
INNER JOIN invoices ON
customers.CustomerId=invoices.CustomerId
WHERE customers.Country='Brazil';

-- Part 4: Show the Employees who are Sales Agents.
SELECT EmployeeId,
FirstName,
LastName
FROM employees WHERE 
Title='Sales Support Agent';

--Part 5: Find a unique/distinct list of billing countries from the Invoice table.
SELECT distinct BillingCountry 
FROM invoices 
ORDER BY BillingCountry asc;

--Part 6: Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
SELECT 
FirstName,
LastName,
InvoiceId
FROM employees 
INNER JOIN customers ON customers.SupportRepID=employees.EmployeeId
INNER JOIN invoices ON invoices.CustomerId=customers.CustomerId;

--Part 7: Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT invoices.Total,
customers.FirstName AS CustomerFirstName,
customers.LastName AS CustomerLastName,
customers.Country AS CustomerLocation,
employees.FirstName AS AgentFirstName,
employees.LastName AS AgentLastName
FROM invoices
INNER JOIN customers ON customers.CustomerId=invoices.CustomerId
INNER JOIN employees ON employees.EmployeeId=customers.SupportRepId;

--Part 8: How many Invoices were there in 2009?
SELECT COUNT(InvoiceId) FROM 
invoices WHERE InvoiceDate LIKE '2009%';
--Part 9: What are the total sales for 2009?
SELECT SUM(Total) FROM 
invoices WHERE InvoiceDate LIKE '2009%';

--Part 10: Write a query that includes the purchased track name with each invoice line ID.
SELECT Name as TrackName,
InvoiceLineId
FROM  tracks 
INNER JOIN invoice_items ON invoice_items.TrackId=tracks.TrackId
ORDER BY InvoiceLineId asc;

--Part 11: Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT 
invoice_items.InvoiceLineId,
tracks.Name AS TrackName,
artists.Name AS ArtistName
FROM invoice_items
JOIN tracks ON tracks.TrackId=invoice_items.TrackId
JOIN albums ON albums.AlbumId=tracks.AlbumId
JOIN artists ON artists.ArtistId=albums.ArtistId;

--Part 12: Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT tracks.Name AS Track,
albums.Title AS Album,
media_types.Name AS Type,
genres.Name AS Genre
FROM tracks
JOIN albums ON albums.AlbumId=tracks.AlbumId
JOIN media_types ON media_types.MediaTypeId=tracks.MediaTypeId
JOIN genres ON genres.GenreId=tracks.GenreId;

--Part 13: Show the total sales made by each sales agent.
SELECT  e.EmployeeId,
e.FirstName,
e.LastName,
AVG(total_sales) as AverageTotalSales
FROM employees e
JOIN customers c ON e.EmployeeId = c.SupportRepId
JOIN invoices i ON c.CustomerId = i.CustomerId
JOIN (SELECT 
        InvoiceId, 
        SUM(UnitPrice * Quantity) as total_sales
     FROM invoice_items
     GROUP BY 
        InvoiceId) ii ON i.InvoiceId = ii.InvoiceId
GROUP BY  e.EmployeeId, 
 e.FirstName,
 e.LastName;

--Part 14: Which sales agent made the most dollars in sales in 2009? 
SELECT employees.FirstName, employees.LastName,
ROUND(SUM(Invoices.Total), 2) as 'Total Sales' 
FROM Employees 
JOIN Customers 
ON customers.SupportRepId = employees.EmployeeId
JOIN Invoices  
ON Invoices.CustomerId = customers.CustomerId
WHERE employees.Title = 'Sales Support Agent' 
AND Invoices.InvoiceDate LIKE '2009%' 
GROUP BY employees.FirstName
ORDER BY (round(sum(Invoices.Total), 2))  DESC LIMIT 1;

--Part 15: Total Number of Tracks by Each Artist: Question: How many tracks does each artist have in the database? 
--Objective: Identify the total count of tracks for each artist.
SELECT
artists.Name,
COUNT(tracks.TrackId) AS TotalTracks
FROM artists
JOIN albums ON albums.ArtistId=artists.ArtistId
JOIN tracks ON tracks.AlbumId=albums.AlbumId
GROUP BY artists.Name;

--Part 16: Total Sales by Genre: Question: What is the total sales amount for each genre. 
--Objective: Calculate the total sales (UnitPrice * Quantity) for each genre.
SELECT genres.GenreId,
genres.Name AS Genre,
SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS TotalSales
FROM genres
JOIN tracks ON tracks.GenreId=genres.GenreId
JOIN invoice_items ON invoice_items.TrackId=tracks.TrackId
GROUP BY genres.GenreId;

--Part 17: Top 5 Customers with the Highest Total Purchase Amount: Question: Who are the top 5 customers with the highest total purchase amount?
--Objective: Identify the top 5 customers by the total amount they have spent.
SELECT customers.CustomerId,
customers.FirstName,
customers.LastName,
SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS TotalSpent
FROM customers
JOIN invoices ON invoices.CustomerId=customers.CustomerId
JOIN invoice_items ON invoice_items.InvoiceId=invoices.InvoiceId
GROUP BY customers.CustomerId
ORDER BY TotalSpent desc LIMIT 5;
